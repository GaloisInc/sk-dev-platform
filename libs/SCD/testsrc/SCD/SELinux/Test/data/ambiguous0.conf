# This is an example policy test file illustrating a potential ambiguity
# in the semantics of SELinux policies, involving the command
# 
# allow t { self t -t } : c p;
# 
# There are two plausible interpretations of the target types in this
# command that result in different access vectors:
# 
# 1. Replace self by t (the source type) to make the target set
# 
# { t t -t }
# 
# which simplifies to the empty set { }. This makes the access vector { }.
# 
# 2. Leave self untouched and simplify the types in the target set,
# which results in the target set
# 
# { self }
# 
# This makes the final access vector { p }.
# 
# Using the checkpolicy program it can be confirmed that interpretation
# 2 is the correct choice in this case. However, to ensure there are no
# ambiguities in the low-level semantics the Haskell program rejects the
# policy with the error message
# 
# "self cannot occur with negative types"
# 
# This is an example of restricting the low-level policy language to a
# subset where the semantics are completely clear.
# 
#ACCESS u:r:t u:r:t c
class c
sid policy_grammar_requires_at_least_one_sid
class c { p }
type t;
allow t { self t -t } : c p;
role r types { t };
user u roles { r };
sid policy_grammar_requires_at_least_one_sid u:r:t
