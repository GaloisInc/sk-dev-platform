class security
class s
class s2
sid kernel
common s { p1 p2 }
class s inherits s
class security inherits s
{
	add_name b c
}
role bepa types typ;
type typ alias { xx yy zz };
type typ2;
type typ3;
type typ4;
attribute apa;
bool b true;
role bepa types {-typ};
neverallow apa - apa  { -self}:s ~p1;
dominance { role bepa { role bepa; role bepa;} }
role_transition {bepa { bepa}} typ bepa;
allow bepa bepa;
type_transition typ -apa apa:{s s} typ3;
if (not not b) { allow apa self:s p1; }
if (b) {
  require {
    type typ;
  }
}
optional {
  require {
   class s { p1 p2 };
   type typ, typ2, typ5;
  }
  allow bepa bepa;
  type_transition typ -apa apa:{s s} typ5;
  user apa roles bepa ;
}
user apa roles { bepa { bepa bepa } };
constrain security b ( r2 == bepa );
validatetrans security ( r3 == bepa );
sid kernel apa:object_r:typ
fs_use_xattr fstypp apa:object_r:typ;
fs_use_xattr fstyp222 apa:object_r:typ;
genfscon fstype222 /bepa - d apa:object_r:typ
genfscon fstype222 / - d apa:object_r:typ
portcon tcp 80 apa:object_r:typ
netifcon myinterface apa:object_r:typ apa:object_r:typ

# allow st tt:c p
# neverallow nst ntt:c p

# source types
# st := id | id - id | { midl+ }

# target types
# tt := st{id/id+self}

# source types in neverallow
# nst := * | ~id | ~{ midl+ } | st
#     := * | ~id | ~{ midl+ } | id | id - id | { midl+ }

# target types in neverallow
# ntt := nst{id/id+self}

# c := nid

# (nested) sets of identifiers
# nid := id | { nid + }

# permissions
# p := * | ~nid | nid

# (nested) sets of (negated) identifiers
# midl = -id | id | { midl+ }
