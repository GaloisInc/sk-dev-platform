# This a legal SELinux policy file, with the tests contained in the
# comments. The Haskell program that implements the low-level semantics
# of SELinux policies is here being asked to compute the access vector
# for the subject security context u:r:t, object security context u:r:t
# and class c, and then to set the boolean variable b to false and
# compute the same access vector again. Here is the result of the test:
# 
# ACCESS ( u:r:t u:r:t c )... { }
# BOOL ( b := False )... ok
# ACCESS ( u:r:t u:r:t c )... { p }
# 
# The first access vector is the empty set of permissions, and the
# second is the set containing the permission p. This is confirmed by
# automatically running the same test using the checkpolicy program.
#
#ACCESS u:r:t u:r:t c
#BOOL b false
#ACCESS u:r:t u:r:t c
class c
sid policy_grammar_requires_at_least_one_sid
class c { p }
type t;
bool b true;
role r types { t };
if (not b) { allow t t : c p; }
user u roles { r };
sid policy_grammar_requires_at_least_one_sid u:r:t
